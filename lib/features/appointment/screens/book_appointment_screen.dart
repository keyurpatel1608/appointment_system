import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:appointment_system/core/providers/appointment_provider.dart';
import 'package:appointment_system/core/models/appointment_model.dart';
import 'package:appointment_system/core/utils/validators.dart';
import 'package:appointment_system/core/utils/app_utils.dart';
import 'package:appointment_system/core/utils/date_utils.dart' as app_date_utils;

class BookAppointmentScreen extends StatefulWidget {
  const BookAppointmentScreen({super.key});

  @override
  State<BookAppointmentScreen> createState() => _BookAppointmentScreenState();
}

class _BookAppointmentScreenState extends State<BookAppointmentScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _targetUserIdController = TextEditingController();

  DateTime? _selectedDate;
  TimeOfDay? _selectedStartTime;
  TimeOfDay? _selectedEndTime;

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _targetUserIdController.dispose();
    super.dispose();
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  Future<void> _selectTime(BuildContext context, bool isStartTime) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
    );
    if (picked != null) {
      setState(() {
        if (isStartTime) {
          _selectedStartTime = picked;
        } else {
          _selectedEndTime = picked;
        }
      });
    }
  }

  Future<void> _bookAppointment() async {
    if (_formKey.currentState!.validate()) {
      if (_selectedDate == null || _selectedStartTime == null || _selectedEndTime == null) {
        AppUtils.showSnackBar(context, 'Please select date and time for the appointment.');
        return;
      }

      final DateTime startDateTime = DateTime(
        _selectedDate!.year,
        _selectedDate!.month,
        _selectedDate!.day,
        _selectedStartTime!.hour,
        _selectedStartTime!.minute,
      );
      final DateTime endDateTime = DateTime(
        _selectedDate!.year,
        _selectedDate!.month,
        _selectedDate!.day,
        _selectedEndTime!.hour,
        _selectedEndTime!.minute,
      );

      if (endDateTime.isBefore(startDateTime)) {
        AppUtils.showSnackBar(context, 'End time cannot be before start time.');
        return;
      }

      final appointmentProvider = Provider.of<AppointmentProvider>(context, listen: false);
      try {
        // Dummy user and company IDs for now
        const String currentUserId = 'dummy_user_id';
        const String companyId = 'dummy_company_id';

        final newAppointment = Appointment(
          id: '', // ID will be generated by Firestore
          title: _titleController.text,
          description: _descriptionController.text,
          startTime: startDateTime,
          endTime: endDateTime,
          userId: currentUserId,
          targetUserId: _targetUserIdController.text,
          companyId: companyId,
          status: AppointmentStatus.pending,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );

        await appointmentProvider.addAppointment(newAppointment);
        AppUtils.showSnackBar(context, 'Appointment booked successfully!');
        Navigator.of(context).pop(); // Go back to previous screen
      } catch (e) {
        AppUtils.showSnackBar(context, 'Failed to book appointment: ${e.toString()}');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Book Appointment'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(
                  labelText: 'Title',
                  border: OutlineInputBorder(),
                ),
                validator: (value) => Validators.emptyValidator(value, 'Title'),
              ),
              const SizedBox(height: 16.0),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(
                  labelText: 'Description',
                  border: OutlineInputBorder(),
                ),
                maxLines: 3,
                validator: (value) => Validators.emptyValidator(value, 'Description'),
              ),
              const SizedBox(height: 16.0),
              TextFormField(
                controller: _targetUserIdController,
                decoration: const InputDecoration(
                  labelText: 'Target User ID (e.g., Employee ID)',
                  border: OutlineInputBorder(),
                ),
                validator: (value) => Validators.emptyValidator(value, 'Target User ID'),
              ),
              const SizedBox(height: 16.0),
              ListTile(
                title: Text(_selectedDate == null
                    ? 'Select Date'
                    : 'Date: ${app_date_utils.DateUtils.formatDate(_selectedDate!)}'),
                trailing: const Icon(Icons.calendar_today),
                onTap: () => _selectDate(context),
              ),
              ListTile(
                title: Text(_selectedStartTime == null
                    ? 'Select Start Time'
                    : 'Start Time: ${_selectedStartTime!.format(context)}'),
                trailing: const Icon(Icons.access_time),
                onTap: () => _selectTime(context, true),
              ),
              ListTile(
                title: Text(_selectedEndTime == null
                    ? 'Select End Time'
                    : 'End Time: ${_selectedEndTime!.format(context)}'),
                trailing: const Icon(Icons.access_time),
                onTap: () => _selectTime(context, false),
              ),
              const SizedBox(height: 24.0),
              Center(
                child: ElevatedButton(
                  onPressed: _bookAppointment,
                  child: const Text('Book Appointment'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}